// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/harrybrwn/db (interfaces: TxBeginor,StmtPreparor)
//
// Generated by this command:
//
//	mockgen -package=mocktx -destination ./mocktx/tx.go . TxBeginor,StmtPreparor
//

// Package mocktx is a generated GoMock package.
package mocktx

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTxBeginor is a mock of TxBeginor interface.
type MockTxBeginor struct {
	ctrl     *gomock.Controller
	recorder *MockTxBeginorMockRecorder
	isgomock struct{}
}

// MockTxBeginorMockRecorder is the mock recorder for MockTxBeginor.
type MockTxBeginorMockRecorder struct {
	mock *MockTxBeginor
}

// NewMockTxBeginor creates a new mock instance.
func NewMockTxBeginor(ctrl *gomock.Controller) *MockTxBeginor {
	mock := &MockTxBeginor{ctrl: ctrl}
	mock.recorder = &MockTxBeginorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxBeginor) EXPECT() *MockTxBeginorMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTxBeginor) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTxBeginorMockRecorder) BeginTx(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTxBeginor)(nil).BeginTx), ctx, opts)
}

// MockStmtPreparor is a mock of StmtPreparor interface.
type MockStmtPreparor struct {
	ctrl     *gomock.Controller
	recorder *MockStmtPreparorMockRecorder
	isgomock struct{}
}

// MockStmtPreparorMockRecorder is the mock recorder for MockStmtPreparor.
type MockStmtPreparorMockRecorder struct {
	mock *MockStmtPreparor
}

// NewMockStmtPreparor creates a new mock instance.
func NewMockStmtPreparor(ctrl *gomock.Controller) *MockStmtPreparor {
	mock := &MockStmtPreparor{ctrl: ctrl}
	mock.recorder = &MockStmtPreparorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStmtPreparor) EXPECT() *MockStmtPreparorMockRecorder {
	return m.recorder
}

// PrepareContext mocks base method.
func (m *MockStmtPreparor) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockStmtPreparorMockRecorder) PrepareContext(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockStmtPreparor)(nil).PrepareContext), ctx, query)
}
